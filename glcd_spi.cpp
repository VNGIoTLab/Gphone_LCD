/* ========================================================================== */
/*                                                                            */
/*   glcd_spi.cpp                                                               */
/*   (c) 2017 VNGIoTLab                                                       */
/*                                                                            */
/*   Description: Only Text mode                                              */
/*   Thanks to SangTaoClub
/*   http://sangtaoclub.net/m/bai-viet/236-share-code-giao-tiep-graphic-lcd-12864-spi-cua-may-gphone-zte.html
/* ========================================================================== */

#include "glcd_spi.h"
#include <Arduino.h>

/*GPIO*/
int _CS, _SCK, _SDA, _AO;
#define SetCS       digitalWrite(_CS, HIGH)
#define ResetCS     digitalWrite(_CS, LOW)
#define SetSCK      digitalWrite(_SCK, HIGH)
#define ResetSCK    digitalWrite(_SCK, LOW)
#define SetSDA      digitalWrite(_SDA, HIGH)
#define ResetSDA    digitalWrite(_SDA, LOW)
#define SetAO       digitalWrite(_AO, HIGH)        //Chot du lieu Command va Data (C/D)
#define ResetAO     digitalWrite(_AO, LOW)

/*Mode and more*/
#define   GRAPHIC_MODE        1
#define   TEXT_MODE           0
int _GRAPHIC_MODE = TEXT_MODE;          //0: Text mode, 1: Graphic mode
#define ROW_MIN			0
#define ROW_MAX			7
#define COL_MIN     0
#define COL_MAX     20
/*Fonts table for Text mode*/
unsigned char font[][6] ={	//Font 5x7
   {0x00, 0x00, 0x00, 0x00, 0x00, 0x00} // 20
  ,{0x00, 0x00, 0x00, 0x5f, 0x00, 0x00} // 21 !
  ,{0x00, 0x00, 0x07, 0x00, 0x07, 0x00} // 22 "
  ,{0x00, 0x14, 0x7f, 0x14, 0x7f, 0x14} // 23 #
  ,{0x00, 0x24, 0x2a, 0x7f, 0x2a, 0x12} // 24 $
  ,{0x00, 0x23, 0x13, 0x08, 0x64, 0x62} // 25 %
  ,{0x00, 0x36, 0x49, 0x55, 0x22, 0x50} // 26 &
  ,{0x00, 0x00, 0x05, 0x03, 0x00, 0x00} // 27 '
  ,{0x00, 0x00, 0x1c, 0x22, 0x41, 0x00} // 28 (
  ,{0x00, 0x00, 0x41, 0x22, 0x1c, 0x00} // 29 )
  ,{0x00, 0x14, 0x08, 0x3e, 0x08, 0x14} // 2a *
  ,{0x00, 0x08, 0x08, 0x3e, 0x08, 0x08} // 2b +
  ,{0x00, 0x00, 0x50, 0x30, 0x00, 0x00} // 2c ,
  ,{0x00, 0x08, 0x08, 0x08, 0x08, 0x08} // 2d -
  ,{0x00, 0x00, 0x60, 0x60, 0x00, 0x00} // 2e .
  ,{0x00, 0x20, 0x10, 0x08, 0x04, 0x02} // 2f /
  ,{0x00, 0x3e, 0x51, 0x49, 0x45, 0x3e} // 30 0
  ,{0x00, 0x00, 0x42, 0x7f, 0x40, 0x00} // 31 1
  ,{0x00, 0x42, 0x61, 0x51, 0x49, 0x46} // 32 2
  ,{0x00, 0x21, 0x41, 0x45, 0x4b, 0x31} // 33 3
  ,{0x00, 0x18, 0x14, 0x12, 0x7f, 0x10} // 34 4
  ,{0x00, 0x27, 0x45, 0x45, 0x45, 0x39} // 35 5
  ,{0x00, 0x3c, 0x4a, 0x49, 0x49, 0x30} // 36 6
  ,{0x00, 0x01, 0x71, 0x09, 0x05, 0x03} // 37 7
  ,{0x00, 0x36, 0x49, 0x49, 0x49, 0x36} // 38 8
  ,{0x00, 0x06, 0x49, 0x49, 0x29, 0x1e} // 39 9
  ,{0x00, 0x00, 0x36, 0x36, 0x00, 0x00} // 3a :
  ,{0x00, 0x00, 0x56, 0x36, 0x00, 0x00} // 3b ;
  ,{0x00, 0x08, 0x14, 0x22, 0x41, 0x00} // 3c <
  ,{0x00, 0x14, 0x14, 0x14, 0x14, 0x14} // 3d =
  ,{0x00, 0x00, 0x41, 0x22, 0x14, 0x08} // 3e >
  ,{0x00, 0x02, 0x01, 0x51, 0x09, 0x06} // 3f ?
  ,{0x00, 0x32, 0x49, 0x79, 0x41, 0x3e} // 40 @
  ,{0x00, 0x7e, 0x11, 0x11, 0x11, 0x7e} // 41 A
  ,{0x00, 0x7f, 0x49, 0x49, 0x49, 0x36} // 42 B
  ,{0x00, 0x3e, 0x41, 0x41, 0x41, 0x22} // 43 C
  ,{0x00, 0x7f, 0x41, 0x41, 0x22, 0x1c} // 44 D
  ,{0x00, 0x7f, 0x49, 0x49, 0x49, 0x41} // 45 E
  ,{0x00, 0x7f, 0x09, 0x09, 0x09, 0x01} // 46 F
  ,{0x00, 0x3e, 0x41, 0x49, 0x49, 0x7a} // 47 G
  ,{0x00, 0x7f, 0x08, 0x08, 0x08, 0x7f} // 48 H
  ,{0x00, 0x00, 0x41, 0x7f, 0x41, 0x00} // 49 I
  ,{0x00, 0x20, 0x40, 0x41, 0x3f, 0x01} // 4a J
  ,{0x00, 0x7f, 0x08, 0x14, 0x22, 0x41} // 4b K
  ,{0x00, 0x7f, 0x40, 0x40, 0x40, 0x40} // 4c L
  ,{0x00, 0x7f, 0x02, 0x0c, 0x02, 0x7f} // 4d M
  ,{0x00, 0x7f, 0x04, 0x08, 0x10, 0x7f} // 4e N
  ,{0x00, 0x3e, 0x41, 0x41, 0x41, 0x3e} // 4f O
  ,{0x00, 0x7f, 0x09, 0x09, 0x09, 0x06} // 50 P
  ,{0x00, 0x3e, 0x41, 0x51, 0x21, 0x5e} // 51 Q
  ,{0x00, 0x7f, 0x09, 0x19, 0x29, 0x46} // 52 R
  ,{0x00, 0x46, 0x49, 0x49, 0x49, 0x31} // 53 S
  ,{0x00, 0x01, 0x01, 0x7f, 0x01, 0x01} // 54 T
  ,{0x00, 0x3f, 0x40, 0x40, 0x40, 0x3f} // 55 U
  ,{0x00, 0x1f, 0x20, 0x40, 0x20, 0x1f} // 56 V
  ,{0x00, 0x3f, 0x40, 0x38, 0x40, 0x3f} // 57 W
  ,{0x00, 0x63, 0x14, 0x08, 0x14, 0x63} // 58 X
  ,{0x00, 0x07, 0x08, 0x70, 0x08, 0x07} // 59 Y
  ,{0x00, 0x61, 0x51, 0x49, 0x45, 0x43} // 5a Z
  ,{0x00, 0x00, 0x7f, 0x41, 0x41, 0x00} // 5b [
  ,{0x00, 0x02, 0x04, 0x08, 0x10, 0x20} // 5c ï¿½
  ,{0x00, 0x00, 0x41, 0x41, 0x7f, 0x00} // 5d ]
  ,{0x00, 0x04, 0x02, 0x01, 0x02, 0x04} // 5e ^
  ,{0x00, 0x40, 0x40, 0x40, 0x40, 0x40} // 5f _
  ,{0x00, 0x00, 0x01, 0x02, 0x04, 0x00} // 60 `
  ,{0x00, 0x20, 0x54, 0x54, 0x54, 0x78} // 61 a
  ,{0x00, 0x7f, 0x48, 0x44, 0x44, 0x38} // 62 b
  ,{0x00, 0x38, 0x44, 0x44, 0x44, 0x20} // 63 c
  ,{0x00, 0x38, 0x44, 0x44, 0x48, 0x7f} // 64 d
  ,{0x00, 0x38, 0x54, 0x54, 0x54, 0x18} // 65 e
  ,{0x00, 0x08, 0x7e, 0x09, 0x01, 0x02} // 66 f
  ,{0x00, 0x0c, 0x52, 0x52, 0x52, 0x3e} // 67 g
  ,{0x00, 0x7f, 0x08, 0x04, 0x04, 0x78} // 68 h
  ,{0x00, 0x00, 0x44, 0x7d, 0x40, 0x00} // 69 i
  ,{0x00, 0x20, 0x40, 0x44, 0x3d, 0x00} // 6a j
  ,{0x00, 0x7f, 0x10, 0x28, 0x44, 0x00} // 6b k
  ,{0x00, 0x00, 0x41, 0x7f, 0x40, 0x00} // 6c l
  ,{0x00, 0x7c, 0x04, 0x18, 0x04, 0x78} // 6d m
  ,{0x00, 0x7c, 0x08, 0x04, 0x04, 0x78} // 6e n
  ,{0x00, 0x38, 0x44, 0x44, 0x44, 0x38} // 6f o
  ,{0x00, 0x7c, 0x14, 0x14, 0x14, 0x08} // 70 p
  ,{0x00, 0x08, 0x14, 0x14, 0x18, 0x7c} // 71 q
  ,{0x00, 0x7c, 0x08, 0x04, 0x04, 0x08} // 72 r
  ,{0x00, 0x48, 0x54, 0x54, 0x54, 0x20} // 73 s
  ,{0x00, 0x04, 0x3f, 0x44, 0x40, 0x20} // 74 t
  ,{0x00, 0x3c, 0x40, 0x40, 0x20, 0x7c} // 75 u
  ,{0x00, 0x1c, 0x20, 0x40, 0x20, 0x1c} // 76 v
  ,{0x00, 0x3c, 0x40, 0x30, 0x40, 0x3c} // 77 w
  ,{0x00, 0x44, 0x28, 0x10, 0x28, 0x44} // 78 x
  ,{0x00, 0x0c, 0x50, 0x50, 0x50, 0x3c} // 79 y
  ,{0x00, 0x44, 0x64, 0x54, 0x4c, 0x44} // 7a z
  ,{0x00, 0x00, 0x08, 0x36, 0x41, 0x00} // 7b {
  ,{0x00, 0x00, 0x00, 0x7f, 0x00, 0x00} // 7c |
  ,{0x00, 0x00, 0x41, 0x36, 0x08, 0x00} // 7d }
  ,{0x00, 0x10, 0x08, 0x08, 0x10, 0x08} // 7e ->
  ,{0x00, 0x78, 0x46, 0x41, 0x46, 0x78} // 7f <-
};

void lcd_write(unsigned char cd, unsigned char data){ //SPI 4Line

	unsigned char i = 0;
	//Select LCD
  ResetCS;            //CS=0

  //Command/Data
  if(cd){	
    SetAO;            //AO=1
  }
  else{ 
    ResetAO;          //AO=0
  }
  
  //Data payload
	for(i=0; i<8; ++i){		
		if(!(data&0x80)){ 
		  ResetSDA;	        //SDA=0;
    }
		else{ 
		  SetSDA;		        //SDA=1;
    }
    ResetSCK;            //SCK=0;
		SetSCK;		          //SCK=1;
		data <<= 1;
	}
  
  //Toggle AO
	if(cd){	
    ResetAO;          //AO=0
  }
  else{ 
    SetAO;            //AO=1
  }	//AO=~AO;
  
  //Unselect 
	SetCS;              //CS=1
}

//X la vi tri hien thi 0-20 (Text font 5x7), Graphic 0-127
//Y la dong hien thi 0-7
void lcd_gotoxy(unsigned char xx, unsigned char y){
  unsigned char x = xx;
  if (_GRAPHIC_MODE == TEXT_MODE){       //Text mode
    x *= 6;                       //Only for Text mode
  }
	lcd_write(0,(x&0x0f));
	lcd_write(0,((x>>4)&0x07)|0x10);
	lcd_write(0,(y&0x0f)|0xb0);
}  

void lcd_clear(unsigned char row){
	unsigned char i=0, j=0;
	for(i=0; i<row; ++i){
		lcd_gotoxy(0, i);
  	for(j=0; j<130; ++j){
  		lcd_write(1,0);
    }//for j
	}//for i
	lcd_gotoxy(0,0);
}

void lcd_putchar(char dat){
	unsigned char v=0;
  char ch = dat;
	if((ch >= 0x20) && (ch <= 0x7f)){
		ch -= 32;
		for(v=0; v<6; ++v)
			lcd_write(1, font[ch][v]);
	}
}

void lcd_puts(char *s){
	while(*s){
		lcd_putchar(*s++);
  }
}

void lcd_init(void){
	lcd_write(0,0xE2);             //Reset
	delay(100); 
	lcd_write(0,0xAF);             //Display ON, 0xAE - OFF
	lcd_write(0,0x2F);             //Power control	
	lcd_clear(ROW_MAX + 1);        //Clear 8 line on screen
}

///////////////////////////////////////END LOCAL LIB//////////////////////////////////////////////////

/////////////////////////////////////New API for VBLUno board////////////////////////////////////////
/*	
*	@brief	Init for SPI GLCD
* @params CS_: CS pin on VBLUno
* @params SCK_: SCK pin on VBLUno
* @params SDA_: SDA pin on VBLUno
* @params AO_: AO pin on VBLUno
* @params GRAPHIC_MODE_: GLCD Mode
*                         0: Text mode
*                         1: Graphic mode (not support in this library)
*/
void InitLcd(int CS_, int SCK_, int SDA_, int AO_, int GRAPHIC_MODE_){ 
  /*Init GPIO*/
  pinMode(CS_, OUTPUT);
  pinMode(SCK_, OUTPUT);
  pinMode(SDA_, OUTPUT);
  pinMode(AO_, OUTPUT);
  
  /*set vars*/
  _CS = CS_;
  _SCK = SCK_;
  _SDA = SDA_;
  _AO = AO_;
  _GRAPHIC_MODE = GRAPHIC_MODE_;
  ResetSCK;
  SetCS;
  ResetSDA;
  ResetAO;
  
	/*Init GLCD*/
	lcd_init();
	lcd_gotoxy(0, 0);
}

/*	
*	@brief	Test function
*/
void TestLcd(){  
  PrintLcd(0, 0, "VNGIoTLab");  
  PrintLcd(1, 0, "VBLUno v2 board");    
  PrintLcd(2, 0, "Test SPI_GLCD Library");
}

/*  
* @brief  Clear all screen
*/
void ClearLcd(void){
  lcd_clear(ROW_MAX + 1); 
}

int check_row(int row){
  int r = row;
  if(r < ROW_MIN){
    r = ROW_MIN;
  }
  else if(r > ROW_MAX){
    r = ROW_MAX;
  }
  return r;
}

int check_col(int col){
  int c = col;
  if(c < COL_MIN){
    c = COL_MIN;
  }
  else if(c > COL_MAX){
    c = COL_MAX;
  }
  return c;
}
/*  
* @brief  Print a string on screen
* @params row: 0-7
* @params col: 0-20
* @params stringdata: a string (1 to 21 character)
* @note   Size of stringdata is not greater than 21 character
*/
void PrintLcd(int row, int col, char* stringdata){  

  //check input
  int r = check_row(row);
  int c = check_col(col);
  
  //go to position
  lcd_gotoxy(c, r);

  //print string
  lcd_puts(stringdata);
}

/*  
* @brief  Print a string on screen
* @params row: 0-7
* @params col: 0-20
* @params num: integer number
*/
void PrintIntLcd(int row, int col, int num){
  char buff[21];
  
  //check input
  int r = check_row(row);
  int c = check_col(col);
  
  //go to position
  lcd_gotoxy(c, r);

  //convert data
  sprintf(buff, "%d", num);
  
  //print string
  lcd_puts((char*)buff);  
}

/*  
* @brief  Print a string on screen
* @params row: 0-7
* @params col: 0-20
* @params doublenum: double number
* @note   precision is %0.4f
*/
void PrintFloatLcd(int row, int col, double doublenum){
  char buff[20];
  
  //check input
  int r = check_row(row);
  int c = check_col(col);
  
  //go to position
  lcd_gotoxy(c, r);

  //convert data  
  sprintf(buff, "%0.4f", doublenum);
  
  //print string
  lcd_puts((char*)buff);  
}

